h1. Ruby library for exporting and using data from CLDR

CLDR ("Common Locale Data Repository":http://cldr.unicode.org) contains tons of high-quality locale data such as formatting rules for dates, times, numbers, currencies as well as language, country, calendar-specific names etc.

For localizing applications in Ruby we'll obviously be able to use this incredibly comprehensive and well-maintained resource.

This library is a first stab at that goal. You can export CLDR data to YAML and Ruby formatted files which are supposed to be usable in an  "I18n":http://github.com/svenfuchs/i18n context but might be usable elsewhere,  too.

h2. Requirements

  * Ruby 1.9 (if you want well-ordered Hashes)
  * Thor

h2. Installation

<pre>
gem install cldr (not there, yet. install locally)
thor install http://github.com/svenfuchs/cldr/raw/master/cldr.thor --as=cldr
</pre>

h2. Usage

This will export all known components from all locales to the target directory ./data/[locale]/[component].{yml,rb}:

<pre>
$ thor cldr:export
</pre>

You can also optionally specify locales and/or components to export as well as the target directory:

<pre>
$ thor cldr:export --locales de fr en --components numbers plurals --target=./tmp/export
</pre>

This will export the components :numbers and :plurals from the locales :de, :fr and :en to the same target directory.

Also note that CLDR natively builds on a locale fallback concept where all locales eventually fall back to a :root locale. E.g. the :de-AT locale only contains a single format for numbers, which means that an application is supposed to use other formats from the :de locale (fallback). Particular bits of information are only present in the :root locale where all locales fall back to eventually.

By default this library just exports data that is present in CLDR for a given locale. If you do not want to use locale fallbacks in your application you'll need to "flatten" locale fallbacks and merge the data during export time. To do that you can use the --merge option:

<pre>
$ thor cldr:export --merge
</pre>



h2. Resources

For additional information on CLDR plural rules see:

  * "http://unicode.org/draft/reports/tr35/tr35.html#Language_Plural_Rules":http://unicode.org/draft/reports/tr35/tr35.html#Language_Plural_Rules
  * "http://www.unicode.org/cldr/data/charts/supplemental/language_plural_rules.html":http://www.unicode.org/cldr/data/charts/supplemental/language_plural_rules.html

